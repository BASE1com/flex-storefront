name: CI Build
on: [push]
jobs:
  Android:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: 3.19.5
      - name: Prepare environment
        run: |
          cp example.env .env
          sed -i 's|STRAPI_TOKEN=|STRAPI_TOKEN=${{ secrets.STRAPI_TOKEN }}|g' .env
          sed -i 's|HYBRIS_BASE_URL=|HYBRIS_BASE_URL=${{ secrets.HYBRIS_BASE_URL }}|g' .env
          sed -i 's|HYBRIS_CLIENT_ID=|HYBRIS_CLIENT_ID=${{ secrets.HYBRIS_CLIENT_ID }}|g' .env
          sed -i 's|HYBRIS_CLIENT_SECRET=|HYBRIS_CLIENT_SECRET=${{ secrets.HYBRIS_CLIENT_SECRET }}|g' .env
      - name: Write Firebase credentials file
        uses: timheuer/base64-to-file@v1.2
        with:
          fileName: "google-services.json"
          fileDir: "./android/app/"
          encodedString: ${{ secrets.FIREBASE_ANDROID_FILE }}
      - name: Update build number
        run: sed -r -i 's/version:(.*)\+(.*)/version:\1+${{ github.run_number }}/g' pubspec.yaml
      - run: flutter pub get
      - run: flutter build apk
      - run: flutter build appbundle
      - name: Upload artifact to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_ANDROID_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_CREDENTIALS }}
          groups: base1-internal
          file: build/app/outputs/flutter-apk/app-release.apk
  iOS:
    runs-on: macos-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: 3.19.5
      - name: Prepare environment
        run: |
          cp example.env .env
          sed -i '' 's|STRAPI_TOKEN=|STRAPI_TOKEN=${{ secrets.STRAPI_TOKEN }}|' .env
          sed -i '' 's|HYBRIS_BASE_URL=|HYBRIS_BASE_URL=${{ secrets.HYBRIS_BASE_URL }}|' .env
          sed -i '' 's|HYBRIS_CLIENT_ID=|HYBRIS_CLIENT_ID=${{ secrets.HYBRIS_CLIENT_ID }}|' .env
          sed -i '' 's|HYBRIS_CLIENT_SECRET=|HYBRIS_CLIENT_SECRET=${{ secrets.HYBRIS_CLIENT_SECRET }}|' .env
      - name: Write Firebase credentials file
        uses: timheuer/base64-to-file@v1.2
        with:
          fileName: "GoogleService-Info.plist"
          fileDir: "./ios/Runner/"
          encodedString: ${{ secrets.FIREBASE_IOS_FILE }}
      - name: Update build number
        run: sed -r -i '' 's/version:(.*)\+(.*)/version:\1+${{ github.run_number }}/' pubspec.yaml
      - run: flutter pub get
      - run: dart pub global activate flutterfire_cli
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.STAGING_BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.STAGING_P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.STAGING_BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.STAGING_KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Build
        run: flutter build ios --release --no-codesign

      - name: Build resolve Swift dependencies
        run: xcodebuild -resolvePackageDependencies -workspace ios/Runner.xcworkspace -scheme Runner -configuration "Release"

      - name: Build xArchive
        run: |
          xcodebuild -workspace ios/Runner.xcworkspace -scheme Runner -configuration "Release" -sdk 'iphoneos' -destination 'generic/platform=iOS' -archivePath build-output/app.xcarchive clean archive

      - name: Export ipa
        run: |
          xcodebuild -exportArchive -archivePath build-output/app.xcarchive -exportPath build-output/ios -exportOptionsPlist ios/ExportOptions.plist

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: App.ipa
          path: /Users/runner/work/flex-storefront/flex-storefront/build-output/ios/flex_storefront.ipa
          retention-days: 1
          if-no-files-found: error

      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision

  distribute-ios:
    needs: iOS
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: App.ipa

      - name: Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1.3.2
        with:
          appId: ${{ secrets.FIREBASE_IOS_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_CREDENTIALS }}
          groups: base1-internal
          file: flex_storefront.ipa
